// 빌드 시
buildscript {
    //ext 라는 키워드는 build.gradle 에서 사용하는 전역변수를 설정하겠다는 의미
    ext {
        springBootVersion = '2.2.1.RELEASE'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
            uri ("https://jitpack.io")
        } // plugin 저장소
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
    }
}

/* 전체 프로젝트 내 전체 모듈 공통설정 */
allprojects {
    // root 프로젝트까지 설정이 필요한 경우 사용
}

/* 하위 프로젝트 내 전체 모듈 공통설정 */
subprojects {
    group 'com.southjy'

    // 아래 4개는 자바와 스프링부트를 사용 하기 위한 필수 플러그인
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management' //의존성들 괸리해주는 플러그인 필수

    //어떤 원격 저장소 에서 받을지 정함
    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava.options.encoding = 'UTF-8'
    javadoc {
        options.charSet = 'UTF-8'
    }

    ext {
        springBootVersion = '2.2.1.RELEASE'
    }

    // 멀티모듈에서 공통으로 사용될 의존성만 추가
    dependencies {
        implementation 'org.slf4j:slf4j-api'
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
        compileOnly 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor "org.projectlombok:lombok:1.18.10"
        implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.flywaydb:flyway-core'
        implementation 'org.springframework.kafka:spring-kafka'
        compileOnly 'org.projectlombok:lombok'
        implementation 'org.springframework.boot:spring-boot-devtools'
        runtimeOnly 'mysql:mysql-connector-java'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.kafka:spring-kafka-test'
        testImplementation 'org.springframework.security:spring-security-test'
    }


    // sub-project 등록시 디렉토리가 존재하지 않으면 자동생성
    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
    }
}

// 각 프로젝트에서만 사용하는 의존성 추가
project(':core') {

    // core 에서는 bootjar로 패키징 할 필요가 없으므로 추가
    bootJar.enabled = false
    jar.enabled = true

    dependencies {
    }
}

project(':consumer') {
    dependencies {
        // 컴파일시 core 모듈을 가져온다.
        compileOnly project(':core')
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
}

project(':admin') {
    dependencies {
        compileOnly project(':core')
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
}

project(':api') {
    dependencies {
        compileOnly project(':core')
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
}
